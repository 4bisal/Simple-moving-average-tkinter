import pandas as pd
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
from tkinter import *
def click_action():
    user_input = var.get()
    sum = 0
    # Pętla do liczenia prognozy metodą średniej ruchomej prostej
    for num in range(0, user_input, 1):
        sum = sum + value[num]
    avg = sum / user_input
    avg = str(round(avg,4))
    wynik.config(text=avg)

#
# Program zczytujący kurs Euro z ostatnich 30 dni ze strony internetowej liczący prognozę na najbliższy okres
# metodą średniej ruchomej prostej dla wybranej wielkości "k" i pokazujący wykres kursu z tych ostatnich 30 dni

# Czytanie tabeli ze strony internetowej
table_MN = pd.read_html('https://exchangerate-euro.com/currency/PLN-zloty-poland/',
attrs = {'class': 'table kurzy'})
f'Total tables: {len(table_MN)}'
df = table_MN[0]
df.head()
df.info()

# Konwertowanie wartości zczytanych z tabeli
date = df["Date"].astype('string')
value = df["Rate per €1"].astype('float')

# Interfejs
root = Tk()
root.title('Prognoza średniej ruchomej prostej')
root.geometry("850x720")
root.configure(bg="#e8e1c8")

# Prośba o podanie liczby k okresów
label = Label(root, text='Podaj k dla średniej ruchomej prostej:')
label.configure(bg="#e8e1c8", font=(SOLID, 14))
label.pack()

przerwa1=Label(root, text=" ")
przerwa1.configure(bg="#e8e1c8")
przerwa1.pack()

# Wstawianie liczby k okresów
var=IntVar()
txt = Entry(root,textvariable=var)
txt.pack()

przerwa2=Label(root, text=" ")
przerwa2.configure(bg="#e8e1c8")
przerwa2.pack()

# Przycisk obliczania prognozy
click = Button(root, text="Oblicz prognozę",bg="#e6dab1", activebackground="#d1cab0")
click.config(command=click_action)
click.pack()

przerwa3=Label(root, text=" ")
przerwa3.configure(bg="#e8e1c8")
przerwa3.pack()

# Przedstawienie wyniku
text=Label(root, text="Prognoza dla kolejnego okresu wynosi")
text.configure(bg="#e8e1c8")
text.pack()

przerwa4=Label(root, text=" ")
przerwa4.configure(bg="#e8e1c8")
przerwa4.pack()

# Wynik prognozy
wynik = Label(root)
wynik.configure(bg="#e8e1c8")
wynik.pack()

przerwa5=Label(root, text=" ")
przerwa5.configure(bg="#e8e1c8")
przerwa5.pack()

# Wykres
fig = Figure(figsize = (6, 6))
a = fig.add_subplot(111)
a.plot(value)
a.invert_xaxis()

canvas = FigureCanvasTkAgg(fig, master=root)
canvas.draw()
canvas.get_tk_widget().pack(side="bottom")


root.mainloop()

